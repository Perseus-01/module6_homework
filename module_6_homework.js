//Задание 1

//Дан массив. Нужно вывести в консоль количество чётных и нечётных элементов в массиве. Если в массиве есть нулевой элемент, то он учитывается и выводится отдельно. 

//При выполнении задания необходимо учесть, что массив может содержать не только числа, но и, например, знаки, null и так далее.

function getOddEven(arr) {
	let even = 0;
	let odd = 0;
	let zero = 0;

	for (let i = 0; i <= arr.length; i++) {
		if(typeof arr[i] == 'number'){
			if(arr[i] % 2 == 0 && arr[i] != 0){
				even+=1;
			}

			else if(arr[i] != 0) {
				odd+=1;
			}

			else if(arr[i] === 0){
				zero+=1;
			}
		}
	}


	if (zero != 0) {
		console.log(`Четных чисел - ${even}, нечетных чисел - ${odd}`);
		console.log(`Нулей - ${zero}`);
	}

		else {
			console.log(`Четных чисел - ${even}, нечетных чисел - ${odd}`);
		}
	 

	let myArr = [null, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	getOddEven(myArr);



//Задание 2


//Написать функцию, которая принимает на входе любое число (но не больше 1 000), определяет, является ли оно простым, и выводит простое число или нет. Если введено больше 1 000, то выводится сообщение, что данные неверны. Обратите внимание на числа 0 и 1.

//Здесь вам пригодятся знания из предыдущего модуля — циклы и условные операторы.


function isPrime(num) {
	if(num > 1000 || typeof num != 'number'){
		alert('Данные неверны');
	}

	else if (num === 0 || num === 1) {
		alert('Число не относится не к простым, не к составным');
	}

	else if (num === 2 || num % 2 != 0) {
		alert('Число является простым')
	}

	else {
		alert('Число является составным')
	}

 }

let x = 3;
isPrime(x);

//https://medium.com/swlh/an-algorithm-a-day-how-to-check-for-a-prime-number-in-javascript-7052630fb4ef
//(Prime numbers are never even (except for 2)





//Задание 3

//Написать функцию, которая принимает число как аргумент и возвращает функцию, которая также принимает число как аргумент
// и возвращает сумму этих двух чисел. Выведите в консоль результат.

function getSum(num1) {
	return function(num2){
		return num1 + num2
	} 
}

console.log(getSum(1)(2))




//Задание 4

//Напишите функцию, которая принимает два числа. 
//Каждую секунду необходимо выводить в консоль, начиная от первого и заканчивая вторым. Используйте setInterval.

function getIntNum(num1, num2) {
let i = num1;
let getIntNum = setInterval(function() {
	console.log(i);
	if (i === num2){
		clearInterval(getIntNum);
	}
	i++;
},
1000);
}

getIntNum(5, 15);


//Задание 5

//Напишите функцию, которая принимает два натуральных числа x и n и возвращает x в степени n. 
//Иначе говоря, умножает x на себя n раз и возвращает результат.
//Протестируйте функцию на любых значениях и выведите результат в консоль.

const numRaise = (x, n) => {
	console.log(Math.pow(x, n))
}

numRaise(2, 2);

//Почему в консоли результат выводится только один раз? Если ввожу повторно, появляется ошибка: 
//Uncaught SyntaxError: Identifier 'numRaise' has already been declared


